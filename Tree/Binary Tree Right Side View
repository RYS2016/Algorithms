/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */

//-------------------------------------BFS Solution---------------------------------
var rightSideView = function(root) {
    if(!root) return [];
    const result = [];
    let queue = [root];
    
  while(queue.length) {
    let length = queue.length, count = 0, currentNode;

    while(count < length) {
      currentNode = queue.shift();
      
      if(currentNode.left) {
        queue.push(currentNode.left);
      }
      
      if(currentNode.right) {
        queue.push(currentNode.right);
      }
      count++;
    }
    result.push(currentNode.val)
  }
  return result;
};

//---------------------------------Another working solution using for loop---------------
var rightSideView = function(root) {
    if(!root) return [];
     let vals = [];
     let q = [ root ];
     
     while(q.length){
         let size = q.length;
         let lvl = [];
         for(let i = 0; i < size; i++){
             let c = q.shift();
             lvl.push(c.val);
             if(c.left) q.push(c.left);
             if(c.right) q.push(c.right);
         }
         vals.push(lvl.at(-1));
     }
     return vals;
 };

 //----------------DFS Solution-----------------------------------------------------

 var rightSideView = function(root) {

    const result = [];
    
    dfs(root, 0, result);

    return result;
};

const dfs = function(node, currentLevel, result){
    if(!node) return;

    if(currentLevel >= result.length){
        result.push(node.val)
    }
    if(node.right){
        dfs(node.right, currentLevel + 1, result)
    }
    if(node.left){
        dfs(node.left, currentLevel + 1, result)
    }

}