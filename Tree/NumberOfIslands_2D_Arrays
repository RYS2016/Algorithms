const direction = [[-1,0],
                    [0,1],
                    [1,0],
                    [0,-1]]

//BFS implementation
var numIslands = function(grid) {

    //define a null case
    if(grid.length === 0) return 0;
    // sequential search and then BFS to convert every 1 to 0 to count an island once
    let islandCount = 0;
    // sequential search:
    for(let row = 0; row < grid.length; row++){
        for(let col = 0; col < grid[row].length; col++){
            if(grid[row][col] === '1'){
                islandCount++;
                  //BFS implementation:
                grid[row][col] = 0;
                const queue = [] //for JS solution we use array
                queue.push([row, col]);

                while(queue.length){
                    const currentPos = queue.shift();
                    const currentRow = currentPos[0];
                    const currentCol = currentPos[1];
                    for(let i = 0; i < direction.length; i++){
                        const currentDir = direction[i];
                        const nextRow = currentRow + currentDir[0];
                        const nextCol = currentCol + currentDir[1];
                        if(nextRow < 0 || nextRow >= grid.length || nextCol < 0 || nextCol >= grid[0].length){
                            continue;
                        }
                        if(grid[nextRow][nextCol] === '1'){
                            queue.push([nextRow, nextCol]);
                            grid[nextRow][nextCol] = 0;
                        }
                    }
                }
            }
        }
    }
    return islandCount;
};
//BFS                       BFS
//T: O(MxN);                O(MxN);
//S: O(max(M, N));          O(MxN);